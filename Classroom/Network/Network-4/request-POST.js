const object = {a: 1, b: 2};
console.log(object); // { a: 1, b: 2 }

// 디버거 확인
// a: undefined, b: undefined
// object: {a: 1, b: 2}

const {a, b} = object;
console.log({a,b}); // { a: 1, b: 2 } 

// 디버거 확인
// a: 1, b: 2
// object: {a: 1, b: 2}
// ! a와 b의 value가 생겼음

// * 결론? (잘 모르겠음)
// 변수를 선언한다: 메모리 공간을 확보한다.
// 변수는 메모리 공간의 주소를 나타내는 상징적인 의미가 됨.

// ? 일반적인 방식으로 변수를 선언하면?
// 객체 프로퍼티의 메모리 공간도 확보하지만, 
// key에 대응하는 값이 무엇인지만 입력해놓고, 
// value에 대응하는 값은 가져오지 않는다.
// (undefined로 공간만 확보하고 값을 입력해놓지는 않음) 

// ? 비구조화 할당 방식으로 변수를 선언하면?(단축작성법)
// 바로 접근해서 메모리 공간을 확보하고,
// 프로퍼티의 value에 대응하는 값을 바로 입력함